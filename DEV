                                    Bermuda
                               DEV documentation

                                 by Peter Mezei
                                 Copyright 2020


Table of content

    0.      Backlog
            -----------------------------------
    1.      Design
            -----------------------------------
    1.1     Task management
    1.2     New document(s) disovery
    1.3     File hierarchy
    ***     Appendix

                                      ***

0.  Backlog

    v0.2

        File upload

            Basic functionality to upload file to a FILE OBJECT. Further
            questions do relate to the further DEV ideas.

        File download

            Basic functionality to download available file. Using the WEB
            interface; after download process does finish, it should open the
            file via the default APP, or via the BROWSER (pdf).

            When we use PDF, browser should be fine as as default PDF viewer.
            Almost all the mobile and desktop platform have PDF support.

            Opening source file is an OPEN question.

        File drop area

            Dropzone to drop file(s). Mainly in the WEB interface. Drop file(s)
            and starts upload process.

        Multiple file upload

            Ability to upload multiple files in the same time. With dropzone,
            the ability to drag and drop multiple files to a dropzone and upload
            them together - but in different upload process with a different
            upload progress bar. It can make upload process faster - overall.

        File upload status indicator

            When uploading file(s) we should dipslay a progress bar per file
            upload process; displaying the progress percentage. It may help
            users to identify how long the upload process takes - as estimated -
            and why they should not worry about the idle time.

            When the upload process takes longer time, and there is not status
            indication, it can be confusing to decide wheter the process takes
            long, or something bad happened and use action needed.

        Download file indicator

            Visually display download status and then open the downloaded file.
            In Angular currently we are downloading the file and then open it as
            a BLOB. But when the file size is too big, and/or the connection
            download speed it not suitable, then after clicking the download
            buttin, we have a white empty page till BLOB loads.

            It would be better to dipslay a status indicator displaying  a
            progress bar with value [0,100]. Once it's value increase 100%, then
            open the BLOB.

        Upload just PDF

            Restrict users upload just PDF files. In this way we cannot use
            source files, or we neet to separate the upload process into two
            processes: File and soruce file upload.

            Also possible:

                - Upload just PDFs
                - Upload PDFs and source files but in different channels
                - Upload PDFs and source files. If I drop a source file (WITH NO
                  PDF EXTENSION) it should automatically upload as a source
                  file, and PDF extension should upload as a FILE.

        Upload file source file

            Being able to upload source file next to a PDF. A source file is a
            secondary attachement, when a file is created then we can upload
            source file that should be the source of the file. It should be
            exactly the same file but SOURCE, or it could by anything - but
            mainly the SOURCE.

            It is also interesting to do it as a reverse; uploading a source
            file and auto GENERATE a PDF from it.

            e.g.:

            1. Upload readme.md - and attach it as a source
            |
            *------> 2. Generating readme.pdf - and attach it as  PDF
                |
                |
                *------ LINK the PDF and the source together 
                        ‾‾‾‾

        Store original file name

            In version 0.1 we rename the uploaded files to the Bermuda FILE
            OBJECT ID. We use this ID to store the file and to enclose to the
            FILE OBJECT. It would better to reserve the original file name at
            least as a meta data. File name may contains specific meta data such
            as version numbers, team or organisation flags, that could be useful
            information checking the available file VERSIONS.

        File VERSION

            It's possible to store multiple version of a file enclosed. The
            latest is the actual working file, but under a history section all
            the uploads (file name, who was the uploader and when, and a link to
            that version). It's like never remove, just overwrite, and store all
            the changes.

        Auto convert plain text file formats to PDF

            Uploading a txt or a markdown file, and convert it to PDF and attach
            it as a PDF. It can make the process easier to do minimal PDF
            process
            in the background. Creating and managing notes should be an easy
            process. Creating, modifying and exporting it to PDF might be an
            overhead.

            Instead, it can be usefull to be able to upload txt, or md file, and
            auto generate the PDF. Or just using them without PDF, as their
            format are quiet limited, and their content is persistent.

            Using a terminal like interface it would be useful to use a command
            e.g.:   bermuda push readme.md
                    bermuda push readme.md -t mezeipetister/dev_folder

        Using plain text and PDF

            As plain text can be easily display, almost platform independent and
            - based on Bermuda - READONLY, it might be a good idea to enable
              using plain text alone next to PDFs.

            So we could upload a readme.md, or readme.txt, or readme and see it
            as a FILE OBJECT with related file readme.md. To download the file
            we could download the plain text and display it even in the browser.
            Format should be fine in all devices.

            The main issue might be the small mobile screen size. Displaying
            plain text in the browser might wrap around as the device width is
            smaller then an average screen size. E.g.: if we use 80 character
            length it would display badly in a mobile browser, as it does apply
            an auto line wrap.
        
        Duedate to files

            Set a duedate to a file. Payment duedate to invoice, or legal
            obligation dates. There are several questions:

                * Should we manage only one duedate or multiple?
                * Should we manage duedate as a part of a task? 

        Owner to files

            Set an owner to a file. Or multiple owners? Or its enough to use a
            created_by metadata and using ASSIGNED_TO and SUBSCRIBERs?

        Task(s) to files

            Set a TASK object to a file. The idea is to take multiple tasks to a
            FILE OBJECT and managing the document LIFE CYCLE usings tasks. E.g.:
            Print, Send to sign, payment, re-sign it, missing data.

            Another idea is to use TAGS for the above examples, e.g. using
            toPrint! or Printed tags.

        Tags

            Using tags in the way we use colored stickers on papers. E.g.:

                toPrint!    => document should be printed ASAP
                Printed     => document has printed
                SignIt      => document is unsigned, it should be signed ASAP
                COPY        => document is a copy
                Original!   => we need to replace it with the original one ASAP

        History

            Storing all the changes in a easily human readable format like a
            history. e.g.:

            * JohnDoe added a tag 'toPrint!'
            * JohnDoe renamed the document to 'NewName'
            * JohnDoe added a new task '9001'
            * JohnDoe uploaded a new source 'NewSource.txt'

        Readme markdown to folder

            Dedicated readme file per folder. If there is any readme, README,
            readme.txt, readme.md, etc... then it would be used as a readme
            FILE. It would display as highlighted block of the folder.

            It would be the part of the project, using all the same tools and
            methods, such as updateing, meta data, tasks, etc... but would be
            dipslayed as a FOLDER COVER.

            Similar to the one that is used by GitHub.

        Folder LOCK

            When closing a folder, in practical it would mean that we have an
            option to virtually close / LOCK the folder. It would mean a WRITE
            LOCK, so a LOCKED folder would remain UNCHANGED. There would be no
            way to modify a LOCKED folder.

            It would be a tool that could grant consistent information over
            time. Although a folder or it content is safe from deletion, and all
            the changes are versioned, but after an unwanted change, it would
            require targeted investigation what and how changed overtime.

            Using LOCK it would grant, that a LOCKED folder remain exactly the
            same over times.

        Symlink

            Symlink a file from a folder to another one. In this way when we
            have a file stored in a folder, it could be used virtually to
            symlink to another target folder; the original file would remain in
            its target folder, but in the other folder it would be easily
            accessable, it would be clear that that file is a SYMLINK, and also
            would be clear the origin of the SYMLINKED file.

            It would be usefull when we have a folder to store all the incoming
            invoices, but we would also SYMLINK the invoices to their project
            folder. E.g.: we have a project where we have all the contracts,
            etc... and here we put a SYMLINK of the related invoce. The invoice
            physically is in another accounting folder, and the digital version
            also placed in the accounting folder, so its available for the local
            authorities to check anytime, but the file itself as a digital copy
            is SYMLINKED to the project folder; so its easily available to check
            the project status anytime.

1.  Design

    1.1 Task management
    
        Purposes: storing tasks and managing due dates. One document can have
        many due dates. Direct tasks, such as payment due, or contract
        validation date, or several meeting dates per invitation letter.

        One solution can be using a multy purpose "attache" like method,
        attaching task/duedate/... to a document. Each kind of item should have
        the same interface, so on system wide we could use the provided
        information.

        Where should we use these information?
         ||||
         ||||
         |||*------ Global due date view displaying all the comming due dates
         |||        and events.
         |||
         ||*------- Tasks / assignments per user 
         ||
         |*-------- Displaying tasks per project / folder
         |
         *--------- Task progress track statistics
                    e.g.: New, In progress, Done states per task

        Task should have:

            0.  Owner
            1.  Due date(s)
            2.  Status
            3.  History?
            4.  Description

        Fears

            *   Task really should have duedate? Or it should be optional?
            *   Status should be a process or rather a bool type?
            *   Task maybe should be as small as it can: short description +
                is_done
            *   Does it necessary to have owner and assigned to at the same
	    	time? Or a created_by and assigned_to is enough? Or should we
		have all the three? Or owner should be dynamic using like
		assigned to?

    1.2 New document(s) discovery

        View of new documents. A kind of summary view, to quickly overview what
        happened and what new documents we have. It should display document
        title, maybe description short version, task(s), due date(s), owner,
        assigned user, uploader user.

        Possible issues

            *   Visibility. What happens when we have a large active user base.
                Everybody shoulld see all the new documents? All the documents
                should be opened and transparent for everybody?

            *   Large number of new documents. Should we display each new
                documents to the users? Is it usefull to display a large set of
                documents to the users?

            *   Priority. Can we somehow organize the new documents to display
                the important ones? Important to who?

            *   Display what? Just the new documents or document updates?

    1.3 File hierarchy

        The degree of freedom of using folders and filed to organize information
        can be complex. It's a question what does create more value: limit the
        possibilities of using folders in hierarchy and force the user to use a
        "clean" flat design, or let the users to put folders and documents to
        everywhere.

        To force a flat design seems to be suitable but wihtout any evidence.


2.  Prototypes

    File

    ----------------------------------------------------
    | File name
    | Tasks t/d     
    ----------------------------------------------------


                                    Appendig
                                      ***

1.  Uppper line to display underline text
    ctrl + K + ' + -
